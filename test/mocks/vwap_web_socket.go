// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// VWAPWebSocket is an autogenerated mock type for the VWAPWebSocket type
type VWAPWebSocket struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *VWAPWebSocket) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connect provides a mock function with given fields: url
func (_m *VWAPWebSocket) Connect(url string) (func(), error) {
	ret := _m.Called(url)

	var r0 func()
	if rf, ok := ret.Get(0).(func(string) func()); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func())
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Read provides a mock function with given fields:
func (_m *VWAPWebSocket) Read() (int, []byte, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 []byte
	if rf, ok := ret.Get(1).(func() []byte); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Subscribe provides a mock function with given fields: channels, productIDs
func (_m *VWAPWebSocket) Subscribe(channels []string, productIDs []string) error {
	ret := _m.Called(channels, productIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, []string) error); ok {
		r0 = rf(channels, productIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
